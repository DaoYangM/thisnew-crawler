import requests
import re
import json
import openpyxl
import logging

headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/76.0.3809.100 Safari/537.36',
    'Sec-Fetch-Mode': 'cors',
    'Referer': 'https://www.zazzle.com/'
}

logging.basicConfig()


class ExcelReader:
    def __init__(self, file_path, jump_first=True):
        # 存放结果
        self.results = []
        workbook = xlrd.open_workbook(file_path, encoding_override='utf8mb4')

        # 获取第一个工作簿
        worksheet = workbook.sheet_by_index(0)
        for i in range(worksheet.nrows):
            # 跳过第一行列名
            if i == 0 and jump_first:
                continue
            # 剩余内容放入结果集
            self.results.append(worksheet.row_values(i))

    def __iter__(self):
        return iter(self.results)

    def get_results(self):
        return self.results


class ZazzleProduct:
    def __init__(self, product_url):
        self.product_url = product_url

    def get_product_type_and_root_product_id(self):
        response = requests.get(self.product_url, headers=headers)
        pattern = re.compile('"producttype":"(.*?)","zidProductID":"(.*?)"')
        match = re.search(pattern, response.text)
        return match.group(1), match.group(2)


class ZazzleReview:
    def __init__(self, zazzle_product_type, root_product_id, review_counts):
        self.product_type = zazzle_product_type
        self.root_product_id = root_product_id
        self.review_counts = review_counts

    def get_reviews(self):
        results = list()

        if self.review_counts != -1:
            loop_times = self.review_counts // 100
            remainder = self.review_counts % 100

            for time in range(loop_times):
                results.append(self.__get_reviews(time + 1, 100))
            if remainder > 0:
                results.append(self.__get_reviews(loop_times + 1, remainder))
        else:
            results.append(self.__get_reviews(1, 100))

        return results

    def __get_reviews(self, page_num, page_size):
        params = {
            'cv': 1,
            'cacheDefeat': 1569293331342,
            'pageNum': page_num,
            'pageSize': page_size,
            'productType': self.product_type,
            'rootProductId': self.root_product_id,
            'sortBy': 'RatingDesc',
            'client': 'js'
        }

        print(page_num, page_size)

        response = requests.get('https://www.zazzle.com/svc/z3/reviews/get', params=params, headers=headers)
        json_content = json.loads(response.text)
        return json_content['data']['entities']['reviews']


class ReviewDump:
    def __init__(self, review_list, file_name):
        self.review_list = review_list
        self.file_name = file_name

    def dump(self):
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.title = 'Sheet1'

        pattern = re.compile('zazzle', flags=re.I)

        row_count = 1
        for review in self.review_list:
            for key, value in review.items():
                sheet.cell(row_count, 1, value=value[''])
                sheet.cell(row_count, 2, value=re.sub(pattern, 'thisnew', value['optionReview']))
                row_count += 1

        workbook.save('./' + self.file_name + '.xlsx')
        print('save ' + self.file_name + '.xlsx ' + str(row_count) + ' success!')


class ZazzleReviewCrawler:
    def __init__(self, product_url, review_counts, ratings: list, this_new_product_ids: list):
        self.__product_url = product_url
        self.__review_counts = review_counts
        self.__ratings = ratings
        self.__this_new_product_ids = this_new_product_ids

    def get_reviews(self):
        product = ZazzleProduct(self.__product_url)
        product_type, product_id = product.get_product_type_and_root_product_id()
        logging('product_type:', product_type, ', product_id:', product_id)

        zazzle_review = ZazzleReview(product_type, product_id, review_count)
        reviews = zazzle_review.get_reviews()

        ReviewDump(reviews, xlsx_file_name).dump()

if __name__ == '__main__':
        xlsx_file_name = row[0]
        zazzle_product_url = row[1]
        review_count = int(row[2])

